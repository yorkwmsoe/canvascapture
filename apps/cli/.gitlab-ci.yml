build-docker-cli:
    stage: üêã docker
    image: docker:stable
    services:
        - docker:dind
    script:
        - cd $CLI_BASE_PATH/
          - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
          - docker build . -t $CI_REGISTRY_IMAGE/cli
          - docker push $CI_REGISTRY_IMAGE/cli
    only:
        changes:
            - $CLI_BASE_PATH/Dockerfile
install-cli:
    image: $CI_REGISTRY_IMAGE/cli:latest
    stage: üõû install
    needs:
        - job: build-docker-cli
          optional: true
    script:
        - cd $CLI_BASE_PATH/
        - npm ci
    artifacts:
        paths:
            - $CLI_BASE_PATH/node_modules/

test-format-cli:
    image: $CI_REGISTRY_IMAGE/cli:latest
    stage: ü§û test
    needs: ['install-cli']
    script:
        - cd $CLI_BASE_PATH/
        - npm run format:check

test-cli:
    image: $CI_REGISTRY_IMAGE/cli:latest
    stage: ü§û test
    needs: ['install-cli']
    script:
        - cd $CLI_BASE_PATH/
        - npm run test:ci
    artifacts:
        when: always
        reports:
            junit:
                - $CLI_BASE_PATH/junit.xml
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'

build-cli:
    image: $CI_REGISTRY_IMAGE/cli:latest
    stage: üì¶ build
    needs: ['install-cli']
    script:
        - cd $CLI_BASE_PATH/
        - npm run build
    artifacts:
        paths:
            - $CLI_BASE_PATH/build/

release-cli:
    image: $CI_REGISTRY_IMAGE/cli:latest
    stage: üöÄ release
    needs: ['install-cli', 'build-cli']
    script:
        - cd $CLI_BASE_PATH/
        - npm run package:win-x64
    artifacts:
        paths:
            - $CLI_BASE_PATH/release/
    when: manual
